HOST: http://demo.nuxeo.com/nuxeo/site/automation

--- Demo Nuxeo API v0.1 ---
---
First attempt to test automation api on nuxeo demo site
---

--
Automation Service Description
--
GET /
> Accept: application/json+nxautomation
< 200
< Content-Type: application/json+nxautomation
{"paths": {
  "login": "login"},
    "codecs": [],
    "operations": [
    {
    "id": "Seam.AddErrorMessage",
    "label": "Add Error Message",
    "category": "User Interface",
    "requires": "Seam",
    "description": "Add a message to be displayed in case the chain execution fails. This is a void operation - the input will be returned back as output",
    "url": "Seam.AddErrorMessage",
    "signature": [
    "void",
    "void"
    ],
    "params": [
    {
    "name": "message",
    "type": "string",
    "required": true,
    "widget": null,
    "order": 0,
    "values": []
    }
    ]
    },
    ...
]
}

--
Nuxeo Automation - User Interface
--


Add Error Message - Add a message to be displayed in case the chain execution fails. This is a void operation - the input will be returned back as output
POST /Seam.AddErrorMessage
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "message":"|"
},
}
< 204




Add Info Message - Add a message to be displayed after the chain is successfuly executed. This is a void operation - the input will be returned back as output
POST /Seam.AddInfoMessage
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "message":"|"
},
}
< 204




Cancel Document Creation in UI - Cancels a document creation in UI, as if user was hitting the 'Cancel' button on a the document creation form. It returns the parent document, that would have been the created document container.
POST /Seam.CancelCreateDocumentInUI
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Change Tab - Change the selected tab for the current document. Preserve the current input.
POST /Seam.ChangeTab
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "tab":"|"
},
}
< 204




Clear Clipboard - Clear the clipboard content.
POST /Seam.ClearClipboard
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204




Clear Selected Documents - Clear the selected documents list.
POST /Seam.ClearSelectedDocuments
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204




Clear Worklist - Clear the worklist content.
POST /Seam.ClearWorklist
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204




Create Document in UI - Creates a document in UI, as if user was hitting the 'Create' button on a the document creation form. It assumes that the contextual 'changeableDocument' document from the Seam context has been updated to hold properties defined for creation. It will navigate to the newly created document context, set its view as outcome, and return the newly created document.
POST /Seam.CreateDocumentInUI
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Destroy Seam Context - Cleanup up Seam context
POST /Seam.DestroyContext
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "conversationId":"|"
},
}
< 204




Download file - Download a file
POST /Seam.DownloadFile
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204




Init Seam Context - Initialize a Seam context (including Conversation if needed)
POST /Seam.InitContext
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "conversationId":"|"
},
}
< 204




Navigate to Document - Navigate to the input document. The outcome of the UI action will be stored in the operation chain context as the 'Outcome' variable. Returns back the document.
POST /Seam.NavigateTo
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "view":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Push to Clipboard - Add a input document(s) to clipboard. Returns back the document(s)
POST /Seam.AddToClipboard
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Push to Seam Context - Push the current input document into Seam context. Returns back the document.
POST /Seam.PushDocument
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "name":"|"
   "scope":"|session, conversation, page, event"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Push to Worklist - Add the input document(s) to worklist. Returns back the document(s)
POST /Seam.AddToWorklist
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Refresh - Refresh the UI cache. This is a void operation - the input object is returned back as the oputput
POST /Seam.Refresh
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "additional list of seam events to raise":"|"
},
}
< 204




Run operation in Seam Context - Initialize a Seam context (including Conversation if needed) and runs an Operation
POST /Seam.RunOperation
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "id":"|"
   "conversationId":"|"
   "isolate":"|false"
},
}
< 200




Save Document in UI - Saves a document in UI, as if user was hitting the 'Save' button on a the document edition form. It assumes that the contextual 'currentDocument' document from the Seam context has been updated to hold the new properties. It will navigate to the edited document context, set its view as outcome, and return it.
POST /Seam.SaveDocumentInUI
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Set JSF Outcome - Set the 'Outcome' context variable that represent a JSF outcome string. This outcome can be used by the next operations that need an outcome. It preserves the current input (e.g returns back the same input).
POST /Seam.SetOutcome
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "outcome":"|"
},
}
< 204




Show Create Document Page - Show the document creation form given a type. This is a void operation: the input object is returned back as the output.
POST /Seam.CreateDocumentForm
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "type":"|"
},
}
< 204




Suggestion handler for navigation to document view - Handles JSF navigation given a DocumentSuggestion as input.
POST /Suggestion.JSF.NavigateToDocument
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "clearFacetedSearch":"|"
   "navigationTree":"|"
   "updateNavigationTree":"|"
},
}
< 200




Suggestion handler for navigation to faceted search view - Handles JSF navigation given a SearchDocumentsSuggestion as input.
POST /Suggestion.JSF.NavigateToFacetedSearch
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Suggestion handler for navigation to group view - Handles JSF navigation given a GroupSuggestion as input.
POST /Suggestion.JSF.NavigateToGroup
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Suggestion handler for navigation to user view - Handles JSF navigation given a UserSuggestion as input.
POST /Suggestion.JSF.NavigateToUser
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200



--
Nuxeo Automation - Workflow Context
--


Apply mapping on input task doc - Applies the mapping passed in parameter on the task document. The sourceDoc in the mapping is the input document in the workflow. The operation throws a ClientException if the input document is not a Task.
POST /Context.ApplyMappingOnTask
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "mappingName":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



BulkRestartWorkflow - Bulk operation to restart workflows.
POST /BulkRestartWorkflow
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "workflowId":"|"
   "batchSize":"|"
   "nodeId":"|"
   "reinitLifecycle":"|"
},
}
< 204




Set Node Variable - Set a workflow node variable given a name and the value in the context of a running workflow. To compute the value at runtime from the current context you should use an EL expression as the value. This operation works on any input type and return back the input as the output.
POST /Context.SetWorkflowNodeVar
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
   "value":"|"
},
}
< 204




Set Workflow Variable - Set a workflow  variable given a name and the value in the context of a running workflow. To compute the value at runtime from the current context you should use an EL expression as the value. This operation works on any input type and return back the input as the output.
POST /Context.SetWorkflowVar
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
   "value":"|"
},
}
< 204




Start workflow - Starts the workflow with the given model id on the input documents. Returns back the input documents. The created workflow instance id is available under the "WorkflowId" context variable
POST /Context.StartWorkflow
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "id":"|"
   "start":"|"
},
}
< 200



--
Nuxeo Automation - Files
--


Attach File - Attach the input file to the document given as a parameter. If the xpath points to a blob list then the blob is appended to the list, otherwise the xpath should point to a blob property. If the save parameter is set the document modification will be automatically saved. Return the blob.
POST /Blob.Attach
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "document":"|"
   "save":"|true"
   "xpath":"|file:content"
},
}
< 200




Attach File or files to the currentDocument. - Attach the input file(s) to the current document using the BlobHolder abstraction
POST /BlobHolder.Attach
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "useMainBlob":"|"
},
}
< 200




Export to File - Save the input blob(s) as a file(s) into the given target directory. The blob(s) filename is used as the file name. You can specify an optional <b>prefix</b> string to prepend to the file name. Return back the blob(s).
POST /Blob.ToFile
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "directory":"|"
   "prefix":"|"
},
}
< 200




Get All Document Files - Gets a list of all blobs that are attached on the input document. Returns a list of files.
POST /Blob.GetAll
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Get Document File - Gets a file attached to the input document. The file location is specified using an xpath to the blob property of the document. Returns the file.
POST /Blob.Get
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "xpath":"|file:content"
},
}
< 200




Get Document Files - Gets a list of files that are attached on the input document. The files location should be specified using the blob list property xpath. Returns a list of files.
POST /Blob.GetList
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "xpath":"|files:files"
},
}
< 200




HTTP Post - Post the input file to a target HTTP URL. Returns back the input file.
POST /Blob.Post
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "url":"|"
},
}
< 200




Remove File - Remove the file attached to the input document as specified by the 'xpath' parameter. If the 'xpath' point to a blob list then the list will be cleared. If the file to remove is part of a list it will be removed from the list otherwise the 'xpath' should point to a blob property that will be removed. If the save parameter is set the document modification will be automatically saved. Return the document.
POST /Blob.Remove
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "save":"|true"
   "xpath":"|file:content"
},
}
< 200




Set File Name - Modify the filename of a file stored in the input document. The file is found in the input document given its xpath specified through the 'xpath' parameter. Return back the input document.
POST /Blob.SetFilename
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
   "save":"|true"
   "xpath":"|file:content"
},
}
< 200




Zip - Creates a zip file from the input file(s). If no file name is given, the first file name in the input will be used. Returns the zip file.
POST /Blob.CreateZip
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "filename":"|"
},
}
< 200



--
Nuxeo Automation - Document
--


Check In - Checks in the input document. Returns back the document.
POST /Document.CheckIn
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "version":"|minor, major"
   "comment":"|"
   "versionVarName":"|"
},
}
< 200




Check Out - Checks out the input document. Returns back the document.
POST /Document.CheckOut
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Copy - Copy the input document into the given folder. The name parameter will be used as the copy name otherwise if not specified the original name will be preserved. The target folder can be specified as an absolute or relative path (relative to the input document) as an UID or by using an EL expression. Return the newly created document (the copy).
POST /Document.Copy
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "target":"|"
   "name":"|"
},
}
< 200




Create - Create a new document in the input folder. You can initialize the document properties using the 'properties' parameter. The properties are specified as <i>key=value</i> pairs separated by a new line. The key used for a property is the property xpath. To specify multi-line values you can use a \ charcater followed by a new line. <p>Example:<pre>dc:title=The Document Title<br>dc:description=foo bar</pre>. Returns the created document.
POST /Document.Create
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "type":"|"
   "name":"|"
   "properties":"|"
},
}
< 200




Delete - Delete the input document. The previous context input will be restored for the next operation.
POST /Document.Delete
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Filter List - Filter the input list of documents given a condition. The condition can be expressed using 4 parameters: types, facets, lifecycle and condition. If more than one parameter is specified an AND will be used to group conditions. <br>The 'types' parameter can take a comma separated list of document type: File,Note.<br>The 'facet' parameter can take a single facet name.<br> The 'life cycle' parameter takes a name of a life cycle state the document should have.<br>The 'condition' parameter can take any EL expression.<p>Returns the list of documents that match the filter condition.
POST /Document.Filter
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces,/default-domain/sections",
"context":{},
"params":{
   "class":"|Any, Regular Document, Document Link, Published Document, Document Proxy, Document Version, Immutable Document, Mutable Document"
   "condition":"|"
   "facet":"|"
   "lifecycle":"|"
   "pathStartsWith":"|"
   "types":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Follow Life Cycle Transition - Follow the given transition on the input document life cycle state
POST /Document.SetLifeCycle
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "value":"|"
},
}
< 200




Follow publish or reject transition - Follow publish if accept is true, reject otherwise.
POST /Comment.Moderate
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "accept":"|"
},
}
< 200




Get Child - Get a child document given its name. Take as input the parent document and return the child document.
POST /Document.GetChild
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
},
}
< 200




Get Children - Get the children of a document. The list of children will become the input for the next operation
POST /Document.GetChildren
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Get Parent - Get the parent document of the input document. The parent document will become the input for the next operation. You can use the 'type' parameter to specify which parent to select from the document ancestors
POST /Document.GetParent
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "type":"|"
},
}
< 200




Guess Nature - Operation that guess the nature of the document using the main blob.
POST /Document.GuessNature
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "message":"|"
},
}
< 200




Lock - Lock the input document for the current user. Returns back the locked document.
POST /Document.Lock
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "owner":"|"
},
}
< 200




Move - Move the input document into the target folder.
POST /Document.Move
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "target":"|"
   "name":"|"
},
}
< 200




Multi-Publish - Publish the input document(s) into several target sections. The target is evaluated to a document list (can be a path, UID or EL expression). Existing proxy is overrided if the override attribute is set. Returns a list with the created proxies.
POST /Document.MultiPublish
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "target":"|"
   "override":"|true"
},
}
< 200




Publish Document - Publish the input document into the target section. Existing proxy is overrided if the override attribute is set. Return the created proxy.
POST /Document.Publish
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "target":"|"
   "override":"|true"
},
}
< 200




Remove ACL - Remove a named Acces Control List from the input document(s). Returns the document(s).
POST /Document.RemoveACL
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "acl":"|"
},
}
< 200




Remove Property - Remove the given property of the input document(s) as specified by the 'xpath' parameter. If the property points to a list then clear the list. Removing a property means setting it to null. Return the document(s).
POST /Document.RemoveProperty
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "xpath":"|"
   "save":"|true"
},
}
< 200




Reset - Reload the input document from the repository. Any previous modification made by the chain on this document will be lost if these modifications were not saved. Return the reloaded document.
POST /Document.Reload
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Save - Save in the repository any modification that was done on the input document. Returns the saved document.
POST /Document.Save
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Set ACL - Set Acces Control Entry on the input document(s). Returns the document(s).
POST /Document.SetACE
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "permission":"|"
   "user":"|"
   "acl":"|local"
   "grant":"|true"
   "overwrite":"|true"
},
}
< 200




Set File - Set the input file to the given property on the input document. If the xpath points to a blob list then the blob is appended to the list, otherwise the xpath should point to a blob property. If the save parameter is set the document modification will be automatically saved. Return the document.
POST /Blob.Set
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "file":"|"
   "save":"|true"
   "xpath":"|file:content"
},
}
< 200




Snapshot Version - Create a new version for the input document. Any modification made on the document by the chain will be automatically saved. Increment version if this was specified through the 'snapshot' parameter. Returns the live document (not the version).
POST /Document.CreateVersion
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "increment":"|None, Minor, Major"
},
}
< 200




Unlock - Unlock the input document. The unlock will be executed in the name of the current user. An user can unlock a document only if has the UNLOCK permission granted on the document or if it the same user as the one that locked the document. Return the unlocked document
POST /Document.Unlock
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Update Properties - Set multiple properties on the input document. The properties are specified as <i>key=value</i> pairs separated by a new line. The key used for a property is the property xpath. To specify multi-line values you can use a \ character followed by a new line. <p>Example:<pre>dc:title=The Document Title<br>dc:description=foo bar</pre>For updating a date, you will need to expose the value as ISO 8601 format, for instance : <p>Example:<pre>dc:title=The Document Title<br>dc:issued=@{org.nuxeo.ecm.core.schema.utils.DateParser.formatW3CDateTime(CurrentDate.date)}</pre><p>Returns back the updated document.
POST /Document.Update
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "properties":"|"
   "changeToken":"|"
   "save":"|true"
},
}
< 200




Update Property - Set a single property value on the input document. The property is specified using its xpath. The document is automatically saved if 'save' parameter is true. If you unset the 'save' you need to save it later using Save Document operation. Return the modified document.
POST /Document.SetProperty
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "value":"|"
   "xpath":"|"
   "save":"|true"
},
}
< 200



--
Nuxeo Automation - Routing
--


Choose branch - Update branch to be executed 
POST /Update.NextStep.ConditionalFolder
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "nextStepPos":"|"
},
}
< 204




Get graph - get graph nodes.
POST /Document.Routing.GetGraph
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "routeDocId":"|"
},
}
< 200




Resume Step - Resume a step that were in running step.
POST /Document.Routing.Resume.Step
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204




Set Current Step from Task - Set the current running step as <document.routing.step> context variable. The comments from the task can be mapped to originating step.
POST /Document.Routing.SetRunningStepFromTask
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "mappingComments":"|"
},
}
< 204




Set Step Done - Set the step as done.
POST /Document.Routing.Step.Done
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204




Set Step back to a ready state - Set the step back to a ready state.
POST /Document.Routing.BackToReady
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204




Set Task Done - Set the task as done.
POST /Document.Routing.EvaluateCondition
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "operator":"|"
   "subject":"|"
   "value":"|"
},
}
< 204




Update comments number on the document - Update comments number on the document
POST /Document.Routing.UpdateCommentsInfoOnDocument
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204



--
Nuxeo Automation - Fetch
--


Context Document(s) - Fetch the input of the context as a document or list of documents. The document will become the input for the next operation.
POST /Context.FetchDocument
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Context File(s) - Fetch the input of the context as a file or list of files. The file(s) will become the input for the next operation.
POST /Context.FetchFile
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Document - Fetch a document from the repository given its reference (path or UID). The document will become the input of the next operation.
POST /Document.Fetch
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "value":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Fetch By Property - For each specified string property value, fetch all documents that match the property and the optional where clause. Matching documents are collected into a list and the returned to the next operation. The operation has no input.
POST /Document.FetchByProperty
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "property":"|"
   "values":"|"
   "query":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



File From URL - Creates a file from a given URL. The file parameter specifies how to retrieve the file content. It should be an URL to the file you want to use as the source. You can also use an expression to get an URL from the context. Returns the created file.
POST /Blob.Create
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "file":"|"
   "encoding":"|"
   "filename":"|"
   "mime-type":"|"
},
}
< 200




PageProvider - Perform a query or a named provider query on the repository. Result is paginated. The query result will become the input for the next operation. If no query or provider name is given, a query returning all the documents that the user has access to will be executed.
POST /Document.PageProvider
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "documentLinkBuilder":"|"
   "language":"|NXQL"
   "page":"|"
   "pageSize":"|"
   "providerName":"|"
   "query":"|"
   "queryParams":"|"
   "sortInfo":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Query - Perform a query on the repository. The query result will become the input for the next operation.
POST /Document.Query
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "query":"|"
   "language":"|NXQL, CMISQL"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



QueryAndFetch - Perform a query or a named provider query on the repository. Result is paginated. The result is returned as a RecordSet (QueryAndFetch) rather than as a List of DocumentThe query result will become the input for the next operation. If no query or provider name is given, a query returning all the documents that the user has access to will be executed.
POST /Resultset.PageProvider
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "documentLinkBuilder":"|"
   "language":"|NXQL"
   "page":"|"
   "pageSize":"|"
   "providerName":"|"
   "query":"|"
   "queryParams":"|"
   "sortInfo":"|"
},
}
< 200




UI Changeable Document - Get the current changeable document from the UI context. The changeable document is used on creation forms.
POST /Seam.GetChangeableDocument
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



UI Clipboard - Get clipboard content from the UI context.
POST /Seam.FetchFromClipboard
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



UI Current Document - Get the current Document from the UI context.
POST /Seam.GetCurrentDocument
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



UI Current Domain - Get the current Domain from the UI context.
POST /Seam.GetCurrentDomain
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



UI Current Workspace - Get the current Workspace from the UI context.
POST /Seam.GetCurrentWorkspace
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



UI Document From Seam - Fetch a document from the Seam context given its Seam name.
POST /Seam.FetchDocument
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



UI Selected documents - Fetch the documents selected in the current folder listing
POST /Seam.GetSelectedDocuments
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



UI Selected documents form list - Fetch the documents selected in the selection list passed as a parameter. If the list name is empty, the current folder selection list is used.
POST /Seam.GetDocumentsFromSelectionList
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "listName":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



UI Worklist - Get worklist content from the UI context.
POST /Seam.FetchFromWorklist
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }


--
Nuxeo Automation - Conversion
--


Convert To PDF - Convert the input file to a PDF and return the new file.
POST /Blob.ToPDF
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Get image view - Get an image from a Picture document.
POST /Picture.getView
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "viewName":"|"
},
}
< 200




Render Document - Get a document or a list of document in input and outputs one or more blobs that contain a rendered view for each input document given a rendering template. The template attribute may contain either the template content either a template URI. Template URis are strings in the form 'template:template_name' and will be located using the runtime resource service. Return the rendered file(s) as blob(s)
POST /Render.Document
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "template":"|"
   "filename":"|output.ftl"
   "mimetype":"|text/xml"
   "type":"|ftl, mvel"
},
}
< 200




Render Document Feed - Get a list of documents as input and outputs a single blob containing the rendering of the document list. The template attribute may contain either the template content either a template URI. Template URis are strings in the form 'template:template_name' and will be located using the runtime resource service. Return the rendered blob
POST /Render.DocumentFeed
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces,/default-domain/sections",
"context":{},
"params":{
   "template":"|"
   "filename":"|output.ftl"
   "mimetype":"|text/xml"
   "type":"|ftl, mvel"
},
}
< 200




Resize a picture - Use conversion servcie to resize a picture contained in a Document or a Blob
POST /Picture.resize
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "maxHeight":"|"
   "maxWidth":"|"
},
}
< 200



--
Nuxeo Automation - Services
--


Create Document from file - Create Document(s) from Blob(s) using the FileManagerService.
POST /FileManager.Import
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "overwite":"|"
},
}
< 200




Create Document from file in User's workspace - Create Document(s) in the user's workspace from Blob(s) using the FileManagerService.
POST /UserWorkspace.CreateDocumentFromBlob
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Create Picture - Create a Picture document in the input folder. You can initialize the document properties using the 'properties' parameter. The properties are specified as <i>key=value</i> pairs separated by a new line. The key <i>originalPicture</i> is used to reference the JSON representation of the Blob for the original picture. The <i>pictureTemplates</i> parameter can be used to define the size of the different views to be generated, each line must be a JSONObject { title="title", description="description", maxsize=maxsize}. Returns the created document.
POST /Picture.Create
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
   "pictureTemplates":"|"
   "properties":"|"
},
}
< 200




Create Relation - Create a relation between 2 documents. The subject of the relation will be the input of the operation and the object of the relation will be retrieved from the context using the 'object' field. The 'predicate' field specify the relation predicate. The 'outgoing' flag indicates the direction of the relation - the default is false which means the relation will go from the input object to the object specified as 'object' parameter. Return back the subject document.
POST /Relations.CreateRelation
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "object":"|"
   "predicate":"|"
   "outgoing":"|false"
},
}
< 200




Create task - Enable to create a routingTask bound to a route and its document. In <b>accept operation chain</b> and <b>reject operation chain</b> fields, you can put the operation chain ID of your choice among the one you contributed. Those operations will be executed when the user validates the task, depending on  whether he accepts or rejects the task. Extra (String) properties can be set on the taskVariables from the input document or from the step.
POST /Workflow.CreateRoutingTask
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "accept operation chain":"|"
   "mappingProperties":"|"
   "mappingTaskVariables":"|"
   "reject operation chain":"|"
},
}
< 200




Create task - Enable to create a task bound to the document. <p><b>Directive</b>, <b>comment</b> and <b>due date</b> will be displayed in the task list of the user. In <b>accept operation chain</b> and <b>reject operation chain</b> fields, you can put the operation chain ID of your choice among the one you contributed. Those operations will be executed when the user validates the task, depending on  whether he accepts or rejects the task. You have to specify a variable name (the <b>key for ... </b> parameter) to resolve target users and groups to which the task will be assigned. You can use Get Users and Groups to update a context variable with some users and groups. If you check <b>create one task per actor</b>, each of the actors will have a task to achieve, versus "the first who achieve the task makes it disappear for the others".</p>
POST /Workflow.CreateTask
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "task name":"|"
   "due date":"|"
   "directive":"|"
   "comment":"|"
   "accept operation chain":"|"
   "reject operation chain":"|"
   "variable name for actors prefixed ids":"|"
   "additional list of actors prefixed ids":"|"
   "create one task per actor":"|true"
},
}
< 200




Creates directory entries - Creates directory entries. Entries are sent as a JSON array. Returning the created entries ids as a JSON array.
POST /Directory.CreateEntries
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "directoryName":"|"
   "entries":"|"
},
}
< 200




Deletes directory entries - Deletes directory entries. Entries ids to delete are sent through a JSON array. Returns deleted entries id as a JSON array.
POST /Directory.DeleteEntries
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "directoryName":"|"
   "entries":"|"
   "markObsolete":"|"
},
}
< 200




Get Linked Documents - Get the relations for the input document. The 'outgoing' parameter ca be used to specify whether outgoing or incoming relations should be returned. Retuns a document list.
POST /Relations.GetRelations
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "predicate":"|"
   "graphName":"|"
   "outgoing":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Get directory entries - Get the entries of a directory. This is returning a blob containing a serialized JSON array. The input document, if specified, is used as a context for a potential local configuration of the directory.
POST /Directory.Entries
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "directoryName":"|"
   "lang":"|"
   "translateLabels":"|"
},
}
< 200




Get user tasks - List tasks assigned to this user or one of its group.Task properties are serialized using JSON and returned in a Blob.
POST /Workflow.GetTask
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




List available actions - Retrieve list of available actions for a given category. Action context is built based on the Operation context (currentDocument will be fetched from Context if not provided as input). If this operation is executed in a chain that initialized the Seam context, it will be used for Action context
POST /Actions.GET
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "category":"|"
   "lang":"|"
},
}
< 200




Log Event In Audit - Log events into audit for each of the input document. The operation accept as input one ore more documents that are returned back as the output.
POST /Audit.Log
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "event":"|"
   "category":"|Automation"
   "comment":"|"
},
}
< 200




Query Audit Service - Execute a JPA query against the Audit Service. This is returning a blob with the query result. The result is a serialized JSON array. You can use the context to set query variables but you must prefix using 'audit.query.' the context variable keys that match the ones in the query.
POST /Audit.Query
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "query":"|"
   "maxResults":"|"
   "pageNo":"|"
},
}
< 200




Reads directory entries - Reads directory entries. Entries ids to read are sent as a JSON array. Returns the entries as a JSON array of JSON objects containing all fields.
POST /Directory.ReadEntries
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "directoryName":"|"
   "entries":"|"
   "lang":"|"
   "translateLabels":"|"
},
}
< 200




Retrieve counters values - Retrieve data collected by one or more Counters
POST /Counters.GET
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "counterNames":"|"
},
}
< 200




Updates directory entries - Updates directory entries. Entries to update are sent as a JSON array. Returns the updated entries ids as a JSON array of JSON objects containing all fields
POST /Directory.UpdateEntries
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "directoryName":"|"
   "entries":"|"
},
}
< 200




UserTaskPageProvider - Returns the tasks waiting for the current user.
POST /Workflow.UserTaskPageProvider
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "language":"|"
   "page":"|"
   "pageSize":"|"
},
}
< 200




remove task -  This operation removes all the tasks created when a given step is run.
POST /Workflow.RemoveRoutingTask
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204



--
Nuxeo Automation - Users & Groups
--


Get Home - Retrieve user's personal workspace.
POST /UserWorkspace.Get
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Get Principal Emails - Fetch the principal emails that have a given permission on the input document and then set them in the context under the given key variable name. The operation returns the input document. You can later use the list of principals set by this operation on the context from another operation. The 'key' argument represents the variable name and the 'permission' argument the permission to check. If the 'ignore groups' argument is false then groups are recursively resolved, extracting user members of these groups. Be <b>warned</b> that this may be a very consuming operation.<ul>Note that <li></li><li>groups are not included</li><li>the list pushed into the context is a string list of emails.</li></ul>
POST /Document.GetPrincipalEmails
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "permission":"|"
   "variable name":"|"
   "ignore groups":"|false"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Get Users and Groups - Fetch the users and groups that have a given permission on the input document and then set them in the context under the given key variable name. The operation returns the input document. You can later use the list of identifiers set by this operation on the context from another operation. The 'key' argument represents the variable name and the 'permission' argument the permission to check. If the 'ignore groups' argument is false then groups will be part of the result. If the 'resolve groups' argument is true then groups are recursively resolved, adding user members of these groups in place of them. Be <b>warned</b> that this may be a very consuming operation. If the 'prefix identifiers' argument is true, then user identifiers are prefixed by 'user:' and groups identifiers are prefixed by 'group:'.
POST /Document.GetUsersAndGroups
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "permission":"|"
   "variable name":"|"
   "ignore groups":"|false"
   "prefix identifiers":"|false"
   "resolve groups":"|false"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Login As - Login As the given user. If no user is given a system login is performed. This is a void operations - the input will be returned back as the output.
POST /Auth.LoginAs
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
},
}
< 200




Logout - Perform a logout. This should be used only after using the Login As operation to restore original login. This is a void operations - the input will be returned back as the output.
POST /Auth.Logout
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200



--
Nuxeo Automation - Notification
--


Log - Logging with log4j
POST /LogOperation
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "level":"|info, debug, warn, error"
   "message":"|"
   "category":"|"
},
}
< 204




Send E-Mail - Send an email using the input document to the specified recipients. You can use the HTML parameter to specify whether you message is in HTML format or in plain text. Also you can attach any blob on the current document to the message by using the comma separated list of xpath expressions 'files'. If you xpath points to a blob list all blobs in the list will be attached. Return back the input document(s). If rollbackOnError is true, the whole chain will be rollbacked if an error occurs while trying to send the email (for instance if no SMTP server is configured), else a simple warning will be logged and the chain will continue.
POST /Notification.SendMail
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "from":"|"
   "message":"|"
   "subject":"|"
   "to":"|"
   "HTML":"|false"
   "files":"|"
   "rollbackOnError":"|true"
   "viewId":"|view_documents"
},
}
< 200




Send Event - Send a Nuxeo event.
POST /Notification.SendEvent
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
},
}
< 204



--
Nuxeo Automation - Push & Pop
--


Pop Document - Restore the last saved input document in the context input stack. This operation must be used only if a PUSH operation was previously made. Return the last <i>pushed</i> document.
POST /Document.Pop
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Pop Document List - Restore the last saved input document list in the context input stack
POST /Document.PopList
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Pop File - Restore the last saved input file in the context input stack. This operation must be used only if a PUSH operation was previously made. Return the last <i>pushed</i> file.
POST /Blob.Pop
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Pop File List - Restore the last saved input file list in the context input stack
POST /Blob.PopList
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Pull Document - Restore the first saved input document in the context input stack. This operation must be used only if a PUSH operation was previously made. Return the first <i>pushed</i> document.
POST /Document.Pull
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Pull Document List - Restore the first saved input document list in the context input stack
POST /Document.PullList
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Pull File - Restore the last saved input file in the context input stack. This operation must be used only if a PUSH operation was previously made. Return the first <i>pushed</i> file.
POST /Blob.Pull
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Pull File List - Restore the first saved input file list in the context input stack
POST /Blob.PullList
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Push Document - Push the input document on the context stack. The document can be restored later as the input using the corrresponding pop operation. Returns the input document.
POST /Document.Push
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Push Document List - Push the input document list on the context stack. The document list can be restored later as the input using the corrresponding pop operation. Returns the input document list.
POST /Document.PushList
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces,/default-domain/sections",
"context":{},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Push File - Push the input file on the context stack. The file can be restored later as the input using the corrresponding pop operation. Returns the input file.
POST /Blob.Push
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200




Push File List - Push the input file list on the context stack. The file list can be restored later as the input using the corrresponding pop operation. Returns the input file list.
POST /Blob.PushList
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 200



--
Nuxeo Automation - Local Configuration
--


Put Simple Configuration parameters - Put Simple Configuration parameters on the input document. Add the 'SimpleConfiguration' facet on the input document if needed. The parameters are specified as <i>key=value</i> pairs separated by a new line. The user adding parameters must have WRITE access on the input document.
POST /LocalConfiguration.PutSimpleConfigurationParameters
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "parameters":"|"
   "save":"|true"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Put a Simple Configuration Parameter - Put a Simple Configuration parameter on the input document. Add the 'SimpleConfiguration' facet on the input document if needed. The user adding a parameter must have WRITE access on the input document
POST /LocalConfiguration.PutSimpleConfigurationParameter
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "key":"|"
   "value":"|"
   "save":"|true"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Set Context Variable From a Simple Configuration Parameter - Set a context variable that points to the value of the given parameter name in the SimpleConfiguration from the input Document. You must give a name for the variable.
POST /LocalConfiguration.SetSimpleConfigurationParameterAsVar
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces",
"context":{},
"params":{
   "name":"|"
   "parameterName":"|"
   "defaultValue":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }


--
Nuxeo Automation - Execution Context
--


Restore Document Input - Restore the document input from a context variable given its name. Return the document.
POST /Context.RestoreDocumentInput
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Restore Documents Input - Restore the document list input from a context variable given its name. Return the document list.
POST /Context.RestoreDocumentsInput
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Restore File Input - Restore the file input from a context variable given its name. Return the file.
POST /Context.RestoreBlobInput
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
},
}
< 200




Restore Files Input - Restore the file list input from a context variable given its name. Return the files.
POST /Context.RestoreBlobsInput
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
},
}
< 200




Restore input blob from a script - Run a script and return the result blob object of the script the output of the operation
POST /Context.RestoreBlobInputFromScript
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "script":"|"
},
}
< 200




Restore input blobs from a script - Run a script and return the result Blobs object of the script the output of the operation
POST /Context.RestoreBlobsInputFromScript
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "script":"|"
},
}
< 200




Restore input document from a script - Run a script and return the result Document object of the script the output of the operation
POST /Context.RestoreDocumentInputFromScript
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "script":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Restore input documents from a script - Run a script and return the result documents object of the script the output of the operation
POST /Context.RestoreDocumentsInputFromScript
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "script":"|"
},
}
< 200
{
  entity-type: "documents"
  entries: [
   {
     "entity-type": "document",
     "uid": "96bfb9cb-a13d-48a2-9bbd-9341fcf24801",
     "path": "/default-domain/workspaces/myws/file",
     "type": "File",
     "state": "project",
     "title": "file",
     "lastModified": "2010-05-24T15:07:08Z",
   },
   ...
   ]
 }



Set Context Variable - Set a context variable given a name and the value. To compute the value at runtime from the current context you should use an EL expression as the value. This operation works on any input type and return back the input as the output.
POST /Context.SetVar
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
   "value":"|"
},
}
< 204




Set Context Variable From Input - Set a context variable that points to the current input object. You must give a name for the variable. This operation works on any input type and return back the input as the output.
POST /Context.SetInputAsVar
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "name":"|"
},
}
< 204



--
Nuxeo Automation - Execution Flow
--


Run Chain - Run an operation chain in the current context
POST /Context.RunOperation
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "id":"|"
   "isolate":"|false"
},
}
< 204




Run Document Chain - Run an operation chain which is returning a document in the current context. The input for the chain ro run is the current input of the operation. Return the output of the chain as a document.
POST /Context.RunDocumentOperation
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "id":"|"
   "isolate":"|false"
},
}
< 200




Run Document Chain in new Tx - Run an operation chain in a separate tx.
POST /Context.RunDocumentOperationInNewTx
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "id":"|"
   "isolate":"|false"
   "rollbackGlobalOnError":"|false"
},
}
< 204




Run File Chain - Run an operation chain which is returning a file in the current context. The input for the chain to run is a file or a list of files. Return the output of the chain as a file or a list of files.
POST /Context.RunFileOperation
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "id":"|"
   "isolate":"|false"
},
}
< 200




Run For Each - Run an operation for each element from the list defined by the 'list' paramter. The 'list' parameter is pointing to context variable that represent the list which will be iterated. The 'item' parameter represent the name of the context varible which will point to the current element in the list at each iteration. You can use the 'isolate' parameter to specify whether or not the evalution context is the same as the parent context or a copy of it. If the isolate is 'true' then a copy of the current contetx is used and so that modifications in this context will not affect the parent context. Any input is accepted. The input is returned back as output when operation terminate.
POST /Context.RunOperationOnList
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "id":"|"
   "list":"|"
   "isolate":"|true"
   "item":"|item"
},
}
< 204




Run For Each Page - Run an operation for each page of the provider defined by the provider name, the operation input is the curent page 
POST /Context.RunOperationOnProvider
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{"input":"/default-domain/workspaces,/default-domain/sections",
"context":{},
"params":{
   "id":"|"
   "isolate":"|true"
},
}
< 204




Save Session - Commit any changes made by the operation on the documents. This can be used to explicitly commit changes. This operation can be executed on any type of input. The input of this operation will be preserved as the input for the next operation in the chain.
POST /Document.SaveSession
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
}
< 204



--
Nuxeo Automation - Scripting
--


Run Input Script - Run a script from the input blob. A blob comtaining script result is returned.
POST /Context.RunInputScript
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "type":"|mvel, groovy"
},
}
< 200




Run Script - Run a script which content is specified as text in the 'script' parameter
POST /Context.RunScript
> Accept: application/json+nxentity, */*
> Content-Type: application/json+nxrequest; charset=UTF-8
> Authorization: Basic QWRtaW5pc3RyYXRvcjpBZG1pbmlzdHJhdG9y==
{
"context":{},
"params":{
   "script":"|"
},
}
< 204


